define("mixins",["module"],function(module){"use strict";var rjsMixins;function getPath(name,config){return function(url,config){var baseUrl=config.baseUrl||"",index=url.indexOf(baseUrl);return~index&&(url=url.substring(baseUrl.length-index)),url}(require.toUrl(name),config)}return rjsMixins={load:function(name,req,onLoad,config){var path=getPath(name,config),mixins=this.getMixins(path);req([name].concat(mixins),function(){onLoad(function(target){return Array.prototype.slice.call(arguments,1).forEach(function(mixin){target=mixin(target)}),target}.apply(null,arguments))})},getMixins:function(path){var mixins,config=module.config()||{};return-1!==path.indexOf("?")&&(path=path.substring(0,path.indexOf("?"))),mixins=config[path]||{},Object.keys(mixins).filter(function(mixin){return!1!==mixins[mixin]})},hasMixins:function(path){return this.getMixins(path).length},processNames:function(names,context){var config=context.config;function processName(name){var path=getPath(name,config);return function(name){return!!~name.indexOf("!")}(name)||!function(name){return!!~name.indexOf("./")}(name)&&!rjsMixins.hasMixins(path)?name:function(name){return"mixins!"+name}(name)}return"string"!=typeof names?names.map(processName):processName(names)}}}),require(["mixins"],function(mixins){"use strict";var originalRequire=window.require,originalDefine=window.define,contexts=originalRequire.s.contexts,hasOwn=Object.prototype.hasOwnProperty;function getOwn(obj,prop){return hasOwn.call(obj,prop)&&obj[prop]}window.require=function(deps,callback,errback,optional){var context,config,contextName="_";return Array.isArray(deps)||"string"==typeof deps||(config=deps,Array.isArray(callback)?(deps=callback,callback=errback,errback=optional):deps=[]),config&&config.context&&(contextName=config.context),(context=getOwn(contexts,contextName))||(context=contexts[contextName]=require.s.newContext(contextName)),config&&context.configure(config),deps=mixins.processNames(deps,context),context.require(deps,callback,errback)},window.define=function(name,deps,callback){var context=getOwn(contexts,"_"),result=originalDefine.apply(this,arguments),queueItem=require.exec("(function () {var queue  = globalDefQueue,item   = queue[queue.length - 1];return item;})();"),lastDeps=queueItem&&queueItem[1];return Array.isArray(lastDeps)&&(queueItem[1]=mixins.processNames(lastDeps,context)),result},Object.keys(originalRequire).forEach(function(key){require[key]=originalRequire[key]}),Object.keys(originalDefine).forEach(function(key){define[key]=originalDefine[key]}),window.requirejs=window.require});